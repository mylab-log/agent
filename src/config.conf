# Config service parameters
[SERVICE]
    level debug
    parsers_file /fluent-bit/etc/parsers.conf
    mem_buf_limit 5MB

# <<< Container logs

# Read docker containers log files
[INPUT]
    name tail

    # path /var/lib/mylab-logagent/src/containers/*/*.log
    path /var/lib/mylab-logagent/src/containers/63906d8ebc65f195a6a60514985d63bd0aba7714ded27f360238314f5ef04f78/63906d8ebc65f195a6a60514985d63bd0aba7714ded27f360238314f5ef04f78.log
    multiline.parser  docker
    db /var/lib/mylab-logagent/data/offsets.db

    tag container.log

# Extract `attrs`
[FILTER]
    name nest
    match container.log
    
    operation lift
    add_prefix attrs_
    nested_under attrs

# Set tag with log format
[FILTER]
    name rewrite_tag
    match container.log

    rule attrs_log_format net container.log.net false
    rule attrs_log_format mylab container.log.mylab false
    rule attrs_log_format nginx container.log.nginx false

# Remove `attrs` nested keys
[FILTER]
    name modify
    match container.log.*
    
    copy attrs_tag container
    remove_wildcard attrs_

# Remove needless keys
[FILTER]
    name record_modifier
    match container.log.*

    remove_key stream
    remove_key attrs

# [mylab] Multiline
[FILTER]
    name multiline
    match container.log.mylab
    multiline.key_content log
    multiline.parser mylab-multi

# [mylab] Extract level
[FILTER]
    name parser
    match container.log.mylab
    key_name log
    parser mylab-lvl-extract
    preserve_key true
    reserve_data true

# [mylab] Set `info` level if not defined
[FILTER]
    name modify
    match container.log.mylab
    condition Key_does_not_exist level true
    add level info

# [.net] Multiline 
[FILTER]
    name multiline
    match container.log.net
    multiline.key_content log
    multiline.parser net-multi

# [.net] Extract level_tag
[FILTER]
    name parser
    match container.log.net
    key_name log
    parser net-lvl-extract
    preserve_key true
    reserve_data true

# [.net] Set level = `error` if level_tag = fatal or fail or crit
[FILTER]
    name modify
    match container.log.net
    condition Key_value_matches level_tag (fatal|fail|crit)
    add level error
    remove level_tag

# [.net] Set level = `debug` if level_tag = dbug
[FILTER]
    name modify
    match container.log.net
    condition Key_value_equals level_tag dbug
    add level debug
    remove level_tag

# [.net] Set level = `warning` if level_tag = warn
[FILTER]
    name modify
    match container.log.net
    condition Key_value_equals level_tag warn
    add level warning
    remove level_tag

# [.net] Set `info` level_tag if not defined
[FILTER]
    name modify
    match container.log.net
    condition Key_does_not_exist level_tag true
    add level info

# [nginx] Extract level_tag
[FILTER]
    name parser
    match container.log.nginx
    key_name log
    parser nginx-lvl-extract
    preserve_key true
    reserve_data true

# [nginx] Set level = `error` if level_tag = error or crit or alert or emerg
[FILTER]
    name modify
    match container.log.nginx
    condition Key_value_matches level_tag (error|crit|alert|emerg)
    add level error
    remove level_tag

# [nginx] Set level = `debug` if level_tag = debug
[FILTER]
    name modify
    match container.log.nginx
    condition Key_value_equals level_tag debug
    add level debug
    remove level_tag

# [nginx] Set level = `warning` if level_tag = warn
[FILTER]
    name modify
    match container.log.nginx
    condition Key_value_equals level_tag warn
    add level warning
    remove level_tag

# [nginx] Set `info` level_tag if not defined
[FILTER]
    name modify
    match container.log.nginx
    condition Key_does_not_exist level_tag true
    add level info

# >>> Container Logs 

# Output to  console
#[OUTPUT]
#    name stdout
#    match *

# Output to Elasticsearch
[OUTPUT]
    name es
    match *

    host ${MLAGENT_ES_HOST}
    port ${MLAGENT_ES_PORT}
    #path ${MLAGENT_ES_PATH}

    logstash_format On
    logstash_prefix ${MLAGENT_ES_PATH}
    
#[OUTPUT]
#    Name null
#    Match *